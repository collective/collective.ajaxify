{"version":3,"file":"chunks/301.776cf30366b95b5d4d77.min.js","mappings":"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","sources":["webpack://adm.sfd.site/./resources/js/toolbar.js","webpack://adm.sfd.site/./resources/js/base_url.js","webpack://adm.sfd.site/./resources/js/details_navigation.js","webpack://adm.sfd.site/./resources/js/parent_click.js","webpack://adm.sfd.site/./resources/js/pat-update.js","webpack://adm.sfd.site/./resources/bundle.js"],"sourcesContent":["import { BasePattern } from \"@patternslib/patternslib/src/core/basepattern\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\n\nclass Pattern extends BasePattern {\n    static name = \"sfd-toolbar\";\n    static trigger = \".pat-toolbar\";\n}\n\nregistry.register(Pattern);\nexport default Pattern;\nexport { Pattern };\n","// Set the base URL based on the current location, listening on navigation changes.\nimport { BasePattern } from \"@patternslib/patternslib/src/core/basepattern\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\nimport events from \"@patternslib/patternslib/src/core/events\";\n\nclass Pattern extends BasePattern {\n    static name = \"sfd-base-url\";\n    static trigger = \".pat-base-url\";\n\n    init() {\n        events.add_event_listener(\n            window.navigation,\n            \"navigate\",\n            \"sfd-base-url--set\",\n            this.set_base_url.bind(this)\n        );\n    }\n\n    set_base_url() {\n        document.body.dataset.baseUrl = window.location.href;\n    }\n}\n\nregistry.register(Pattern);\nexport default Pattern;\nexport { Pattern };\n","// Set the base URL based on the current location, listening on navigation changes.\nimport { BasePattern } from \"@patternslib/patternslib/src/core/basepattern\";\nimport Parser from \"@patternslib/patternslib/src/core/parser\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nconst log = logging.getLogger(\"details-navigation\");\n\nexport const parser = new Parser(\"details-navigation\");\nparser.addArgument(\"breakpoint\", 1024);\n\n\nclass Pattern extends BasePattern {\n    static name = \"details-navigation\";\n    static trigger = \"details.pat-details-navigation\";\n    static parser = parser;\n\n    init() {\n        const mediaquerylist = window.matchMedia(`(min-width: ${this.options.breakpoint}px)`);\n        events.add_event_listener(\n            mediaquerylist,\n            \"change\",\n            \"details-navigation-mq\",\n            (mql) => {\n                this.set_details_state(mql);\n                log.info(`mediaquery change - window.innerWidth: ${window.innerWidth}`);\n            }\n        );\n\n        // Open all in-paths details elements\n        const in_path_open = async () => {\n            // Wait a tick, so that the current class is set.\n            await utils.timeout(0);\n            const details = this.el.querySelectorAll(\"details:has(.current)\");\n            console.log(\"details\", details);\n            for (const detail of details) {\n                detail.setAttribute(\"open\", \"\");\n                console.log(\"detail\", detail);\n            }\n        }\n\n        in_path_open();\n\n        //events.add_event_listener(\n        //    window.navigation,\n        //    \"navigate\",\n        //    \"pat-details-navigation--history-changed\",\n        //    () => {\n        //        if (! this.el.hasAttribute(\"open\")) {\n        //            // Don't do any open/close changes, if the navigation is open.\n        //            // This is only for changing the state in the background.\n        //            // ALTERNATIVE: set the default state when the menu is opened.\n        //            in_path_open();\n        //        }\n        //    }\n        //);\n\n        // Close the navigation on mobile devices.\n        events.add_event_listener(\n            window.navigation,\n            \"navigate\",\n            \"pat-details-navigation--history-changed\",\n            () => {\n                // Only close the nav after navigating on mobile devies.\n                if (! mediaquerylist.matches && this.el.hasAttribute(\"open\")) {\n                    this.el.removeAttribute(\"open\");\n                }\n            }\n        );\n\n        // Close on ESC\n        events.add_event_listener(\n            this.el,\n            \"keydown\",\n            \"pat-details-navigation--close-on-esc\",\n            (event) => {\n                if (event.key === \"Escape\") {\n                    // Only close the main details element on mobile devices.\n                    if (! mediaquerylist.matches) {\n                        this.el.removeAttribute(\"open\");\n                    }\n                    // TODO: Revisit and rework to close only non-in-path details.\n                    //// Close all submenus on ESC\n                    //for (const sub of this.el.querySelectorAll(\"details\")) {\n                    //    sub.removeAttribute(\"open\");\n                    //}\n                }\n            }\n        );\n\n        this.set_details_state(mediaquerylist);\n    }\n\n    set_details_state(mql) {\n        log.info(\"set_details_state\");\n        if (mql.matches && ! this.el.hasAttribute(\"open\")) {\n            // Open the details navigation element\n            this.el.setAttribute(\"open\", \"\");\n            log.info(\"    set open\");\n        } else if (! mql.matches && this.el.hasAttribute(\"open\")) {\n            // Close the details navigation element\n            this.el.removeAttribute(\"open\");\n            log.info(\"    set closed\");\n        }\n    }\n}\n\nregistry.register(Pattern);\nexport default Pattern;\nexport { Pattern };\n","// Set the base URL based on the current location, listening on navigation changes.\nimport { BasePattern } from \"@patternslib/patternslib/src/core/basepattern\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\n\nconst log = logging.getLogger(\"details-navigation\");\n\n\n\nclass Pattern extends BasePattern {\n    static name = \"parent-click\";\n    static trigger = \".pat-parent-click\";\n\n    init() {\n        events.add_event_listener(\n            this.el,\n            \"click\",\n            \"pat-parent-click\",\n            (ev) => {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.el.parentNode.click();\n            }\n        );\n    }\n}\n\nregistry.register(Pattern);\nexport default Pattern;\nexport { Pattern };\n","import { BasePattern } from \"@patternslib/patternslib/src/core/basepattern\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport Parser from \"@patternslib/patternslib/src/core/parser\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\n\nexport const parser = new Parser(\"update\");\nparser.addArgument(\"event\", \"pat-update\");\nparser.addArgument(\"action\", \"scan\", [\"scan\", \"reload\"]);\nparser.addArgument(\"selector\", null);\nparser.addArgument(\"reload-url\", null);\nparser.addArgument(\"reload-url-append\", null);\nparser.addArgument(\"scan-patterns\", null);\n\nclass Pattern extends BasePattern {\n    static name = \"update\";\n    static trigger = \".pat-update\";\n    static parser = parser;\n\n    parser_group_options = false;\n\n    init() {\n        let targets = [this.el];\n        if (this.options.selector) {\n            targets = document.querySelectorAll(this.options.selector);\n        }\n\n        let listener = this.el;\n\n        // Navigate needs to listen on window.navigation.\n        // NOTE: We have a polyfill for window.navigation.\n        if (this.options.event === \"navigate\") {\n            listener = window.navigation;\n        }\n\n        // NOTE: Listens only to native JavaScript events, not to jQuery events.\n        events.add_event_listener(\n            listener,\n            this.options.event,\n            \"pat-update--listener\",\n            async () => {\n                for (const el of targets) {\n                    let url;\n                    if (this.options.action === \"reload\") {\n                        if (this.options.event === \"navigate\") {\n                            url = window.location.href;\n                        } else {\n                            // Get the URL, if possible.\n                            url =\n                                this.options[\"reload-url\"] ||\n                                el.getAttribute(\"href\") ||\n                                el.getAttribute(\"src\") ||\n                                document.body.dataset?.baseUrl;\n                        }\n\n                        // Append to URL if defined.\n                        if (url && this.options[\"reload-url-append\"]) {\n                            url = url.split(\"@@\")[0]; // Use URL without any `@@` view.\n                            url = `${url}/${this.options[\"reload-url-append\"]}`;\n                        }\n                    }\n                    if (url) {\n                        const response = await fetch(url);\n                        const html = await response.text();\n                        el.innerHTML = html;\n                    }\n\n                    // Always scan.\n                    registry.scan(\n                        el,\n                        // If there are any patterns defined, pass them here\n                        this.options[\"scan-patterns\"]?.split(\",\").map((it) => it.trim())\n                    );\n                }\n            }\n        );\n    }\n}\n\nregistry.register(Pattern);\nexport default Pattern;\nexport { Pattern };\n","import $ from \"jquery\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\nimport \"./js/toolbar\";\nimport \"./js/base_url\";\nimport \"./js/details_navigation\";\nimport \"./js/parent_click\";\nimport \"./js/pat-update\";\n\n// Add a new trigger for the inject pattern.\n// NOTE: This is an important trigger, triggering all child anchors from the current domain!\nregistry.patterns.inject.trigger =\n    `a[href^=\"${window.location.origin}\"].pat-inject`\n    + `,.pat-inject a[href^=\"${window.location.origin}\"]`\n    + `:not([href$=pdf])`\n    + `:not([href$=mp3])`\n    + `:not([href$=wav])`\n    + `:not([href$=jpg])`\n    + `:not([href$=webp])`\n    + `:not([href$=png])`\n    + `:not(.dropdown-toggle)`\n    + `:not([id^=\"autotoc\"])`\n    + `:not(form)`\n; // exclude forms.\n\n// Reload subscriber for theme changes.\n// The meta tag is set in `main_template` and `main_template_ajax`.\n// The theme info itself is set in `adm.sfd.site.theme.traverser`.\n// NEEDS jQuery.\n$(document.body).on(\n    \"pat-ajax-success\",\n    (event) => {\n        // Get the HTML from the response.\n        let response_html = event?.jqxhr?.responseText;\n        if (!response_html) {\n            console.debug(\"THEME RELOAD DEBUG: no theme found in response\");\n            return;\n        }\n        // Get the theme from the response.\n        const url = event?.jqxhr?.url;\n        console.debug(url);\n        const theme = response_html.match(/\\<meta itemprop=\"theme\" content=\"(.*)\"/)?.[1];\n        if (!theme) {\n            console.debug(\"THEME RELOAD DEBUG: no theme found in response\");\n            return;\n        }\n\n        console.debug(\"THEME RELOAD DEBUG: response theme: \", theme);\n\n        // Check against the current theme.\n        // NOTE: meta[itemprop='theme'] is set in `main_template` and\n        // `main_template_ajax`.\n        const current_theme = document.querySelector(\"meta[itemprop='theme']\").content;\n        console.debug(\"THEME RELOAD DEBUG: current theme: \", current_theme);\n\n        // If different, reload the page with the URL from the original AJAX\n        // request.\n        if (theme !== current_theme && url) {\n            // Give me a random string.\n            const rnd = Math.random(1,9999).toString(36).substring(2);\n            const reload_url = `${url}?${rnd}`;\n            window.location.href = reload_url;\n        }\n    }\n);\n\n\nregistry.init();\n\n// Re-scan the DOM for our modified inject pattern.\n// Scanning might have been done at a previous `registry.init` call from another\n// MF bundle, so we need to re-scan for our modified trigger.\nregistry.scan(document.body, [\"inject\"]);\n"],"names":["Pattern","BasePattern","static","registry","register","init","events","add_event_listener","window","navigation","this","set_base_url","bind","document","body","dataset","baseUrl","location","href","log","logging","getLogger","parser","Parser","addArgument","mediaquerylist","matchMedia","options","breakpoint","mql","set_details_state","info","innerWidth","async","utils","timeout","details","el","querySelectorAll","console","detail","setAttribute","in_path_open","matches","hasAttribute","removeAttribute","event","key","ev","preventDefault","stopPropagation","parentNode","click","parser_group_options","targets","selector","listener","url","action","getAttribute","split","response","fetch","html","text","innerHTML","scan","map","it","trim","patterns","inject","trigger","origin","$","on","response_html","jqxhr","responseText","debug","theme","match","current_theme","querySelector","content","reload_url","Math","random","toString","substring"],"sourceRoot":""}